### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

type Image {
  createdAt: DateTime!
  format: String!
  height: Int!
  id: Int!
  originalFilename: String!
  publicId: String!
  resourceType: String!
  secureUrl: String!
  url: String!
  width: Int!
}

input ImageCreateNestedOneWithoutPostInput {
  connect: ImageWhereUniqueInput
  connectOrCreate: ImageCreateOrConnectWithoutPostInput
  create: ImageCreateWithoutPostInput
}

input ImageCreateOrConnectWithoutPostInput {
  create: ImageCreateWithoutPostInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateWithoutPostInput {
  bytes: Int!
  createdAt: DateTime!
  etag: String!
  format: String!
  height: Int!
  originalFilename: String!
  publicId: String!
  resourceType: String!
  secureUrl: String!
  signature: String!
  type: String!
  url: String!
  version: Int!
  width: Int!
}

input ImageWhereUniqueInput {
  id: Int
  publicId: String
  secureUrl: String
  url: String
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  createPost(data: PostCreateInput): Post
  updateUserSettings(data: UserUpdateInput, id: Int): User
  updateViews(id: Int, userId: Int): Post
}

type Post {
  author: User!
  authorId: Int!
  caption: String
  createdAt: DateTime!
  id: Int!
  image: Image!
  views: Int!
}

input PostCreateInput {
  author: UserCreateNestedOneWithoutPostsInput!
  caption: String
  createdAt: DateTime
  image: ImageCreateNestedOneWithoutPostInput!
  published: Boolean
  views: Int
}

input PostCreateManyAuthorInput {
  caption: String
  createdAt: DateTime
  id: Int
  imagePublicId: String!
  published: Boolean
  views: Int
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  caption: String
  createdAt: DateTime
  image: ImageCreateNestedOneWithoutPostInput!
  published: Boolean
  views: Int
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  image(where: ImageWhereUniqueInput!): Image
  images(after: ImageWhereUniqueInput, before: ImageWhereUniqueInput, first: Int, last: Int): [Image!]!
  post(where: PostWhereUniqueInput!): Post
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

type User {
  email: String
  emailVerified: DateTime
  followers: Int!
  id: Int!
  image: String
  name: String!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  slug: String!
  views: Int!
}

input UserCreateInput {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  followers: Int
  image: String
  name: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  slug: String
  updatedAt: DateTime
  views: Int
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutPostsInput {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  followers: Int
  image: String
  name: String!
  slug: String
  updatedAt: DateTime
  views: Int
}

input UserUpdateInput {
  email: String
  emailVerified: DateTime
  image: String
  name: String
}

input UserWhereUniqueInput {
  email: String
  id: Int
  slug: String
}
